/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vending_machine;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author YehWolf
 */
public class VendingMachine extends javax.swing.JFrame {
    private List<Drinks> drinks;
    private JPanel drinksPanel;
    private Drinks selectedDrink;
    private Payment cart;
    private DefaultTableModel cartTableModel;
    private List<AddedDrink> addedDrinksList = AddedDrink.getAddedDrinksList();

    public VendingMachine() {
        initComponents();
        initializeCustomComponents();
        loadDrinksFromFile("drinks.txt");
        populateDrinksPanel();
        cart = new Payment();
        initializeCartTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        DrinksPanel = new javax.swing.JScrollPane();
        pay = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        AddToCart = new javax.swing.JButton();
        RemoveFromCart = new javax.swing.JButton();
        quantity = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Cart = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nameText = new javax.swing.JLabel();
        quantityText = new javax.swing.JLabel();
        priceText = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        cash = new javax.swing.JTextField();
        change = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Vending Machine");
        setResizable(false);

        pay.setText("Pay");
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Quantity :");

        AddToCart.setText("Add To Cart");
        AddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToCartActionPerformed(evt);
            }
        });

        RemoveFromCart.setText("Remove From Cart");
        RemoveFromCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveFromCartActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 204));
        jLabel2.setText("Yuniverse Dispenser");

        Cart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drink", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(Cart);

        jLabel3.setText("Name :");

        jLabel4.setText("Quantity :");

        jLabel5.setText("Price :");

        jLabel6.setText("Total :");

        jLabel7.setText("Cash :");

        jLabel8.setText("Change :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DrinksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(RemoveFromCart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(AddToCart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(pay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nameText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(quantityText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(priceText, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cash, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(315, 315, 315))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantityText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(quantity))
                        .addGap(18, 18, 18)
                        .addComponent(AddToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemoveFromCart, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cash, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(change, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(13, 13, 13)
                        .addComponent(pay, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(DrinksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToCartActionPerformed
        if (selectedDrink != null) { // Check if a drink is selected
            int selectedQuantity = (int) quantity.getValue();

            if (selectedQuantity == 0) { //Check if the selected quantity is 0
                JOptionPane.showMessageDialog(this, "Please select a quantity.");
                return; // Exit the method
            }

            AddedDrink newDrink = new AddedDrink(selectedDrink.getName(), selectedQuantity, selectedDrink.getPrice()); // Create a new instance
            boolean drinkUpdated = AddedDrink.updateOrAddToList(newDrink); // Check if the drink is already in the cart

            if (!drinkUpdated) { // If drink not in cart, add the drink into the cart
                addToCartTable(new CartItem(
                    selectedDrink.getName(),
                    selectedDrink.getPrice(),
                    selectedQuantity
                ));
            } else { // If the drink is already in the cart, update the quantity of the cart
                int rowIndex = getCartTableRowIndex(selectedDrink.getName());
                if (rowIndex != -1) {
                    cartTableModel.setValueAt(selectedQuantity, rowIndex, 1);
                }
            }

            updateQuantitySpinner();
            updateTotalLabel();
            JOptionPane.showMessageDialog(this, "Item added to cart!");
        }
    }//GEN-LAST:event_AddToCartActionPerformed

    private void RemoveFromCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveFromCartActionPerformed
        if (selectedDrink != null) { // Checks if a drink is selected
            boolean removed = AddedDrink.removeFromList(addedDrinksList, selectedDrink.getName()); // Tries to remove the drink from the cart

            if (removed) { // If the drink is removed
                updateQuantitySpinner(); // Update the quantity spinner

                int rowIndex = getCartTableRowIndex(selectedDrink.getName()); // Get the row index of the drink and remove the drink from the table
                if (rowIndex != -1) {
                    cartTableModel.removeRow(rowIndex);
                }

                updateTotalLabel();
                JOptionPane.showMessageDialog(this, "Item removed from cart!");
            } else { // If the drink is not dound in the cart
                JOptionPane.showMessageDialog(this, "Item not found in cart.");
            }
        }
    }//GEN-LAST:event_RemoveFromCartActionPerformed
  
    private void payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payActionPerformed
        // Get the input from the cash text field
        String cashInput = cash.getText();

        // Check if the input is the admin password
        if ("helloadmin".equals(cashInput)) { // Check for admin password
            // Open the admin tool window
            AdminTool adminTool = new AdminTool();
            adminTool.setVisible(true);
            return; // Exit the method after opening the admin view
        }

        // Check if the input is the command to close the vending machine
        if ("closeVM".equals(cashInput)) { // Check for close command
            // Close the vending machine window
            this.dispose();
            return; // Exit the method
        }

        // Check if the cart is not empty
        if (!addedDrinksList.isEmpty()) { // If drinks list is not empty
            // Check if the input is a valid numeric amount
            if (cashInput.matches("\\d+(\\.\\d+)?")) { // Only numbers format
                // Convert the cash input to a numeric amount
                double cashAmount = Double.parseDouble(cashInput);

                // Process the payment and check if it was successful
                boolean paymentSuccessful = cart.processPayment(addedDrinksList, cashAmount);

                if (paymentSuccessful) { // If payment was successful
                    // Calculate and display change
                    change.setText("RM" + String.format("%.2f", cashAmount - cart.calculateTotal(addedDrinksList)));
                    JOptionPane.showMessageDialog(this, "Payment successful! Change: " + change.getText());

                    // Save the payment history, reset the cart, and update display
                    saveAddedDrinksToFile("payment_history.txt");
                    cartTableModel.setRowCount(0);
                    cash.setText("");
                    change.setText("");
                    addedDrinksList.clear();
                    selectedDrink = null;
                    updateTotalLabel();
                    loadDrinksFromFile("drinks.txt");
                    updateDrinksPanel();
                } else { // If payment was not successful
                    JOptionPane.showMessageDialog(this, "Insufficient funds. Please add more cash.");
                }
            } else { // If input is not a valid numeric amount
                JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid numeric amount.");
            }
        } else { // If the cart is empty
            JOptionPane.showMessageDialog(this, "Cart is empty. Add items before making a payment.");
        }
    }//GEN-LAST:event_payActionPerformed

    public void saveAddedDrinksToFile(String filename) {
        try {
            // Open a buffered writer in append mode to write from drinks.txt
            BufferedWriter bw = new BufferedWriter(new FileWriter(filename, true)); // Append mode
            
            for (AddedDrink addedDrink : addedDrinksList) { // Iterate through each added drink in the list                
                String timestamp = new SimpleDateFormat("dd/MM/yyyy").format(new Date()); // Get the current timestamp in the format "dd/MM/yyyy"
                String line = timestamp + "," + addedDrink.getDrinkName() + "," + addedDrink.getQuantity() + "," + addedDrink.getPrice(); // Create a line to be written in the file, combining drink information
                // Write the line to the file and move to the next line
                bw.write(line);
                bw.newLine();
            }
            bw.close(); // Close the buffered writer to finish writing and release resources
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void updateDrinksPanel() {
        drinksPanel.removeAll();
        populateDrinksPanel();
        drinksPanel.revalidate();
        drinksPanel.repaint();
        nameText.setText("");
        quantityText.setText("");
        priceText.setText("");
    }

    private void initializeCustomComponents() {
        drinksPanel = new JPanel();
        DrinksPanel.setViewportView(drinksPanel);
        drinks = new ArrayList<>();
    }

    public void loadDrinksFromFile(String filename) {
        drinks.clear(); // Clear drinks list
        try {
            BufferedReader br = new BufferedReader(new FileReader(filename)); // Open buffered reader to read from drinks.txt
            String line;

            while ((line = br.readLine()) != null) { // Read each line until the end
                String[] parts = line.split(","); // Split the lines using comma
                if (parts.length == 4) { // Checks if the drink has 4 parts
                    String name = parts[0];
                    double price = Double.parseDouble(parts[1]);
                    int quantity = Integer.parseInt(parts[2]);
                    String imagePath = parts[3];
                    drinks.add(new Drinks(name, price, quantity, imagePath)); // Create a new Drinks object
                }
            }
            br.close(); // Close buffered reader
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void populateDrinksPanel() {
        drinksPanel.setLayout(new GridLayout(0, 3, 10, 10));

        for (final Drinks drink : drinks) {
            if (drink.getQuantity() > 0) {
                JButton drinkButton = new JButton();

                ImageIcon imageIcon = new ImageIcon(drink.getImagePath());
                Image scaledImage = imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                ImageIcon scaledImageIcon = new ImageIcon(scaledImage);
                drinkButton.setIcon(scaledImageIcon);
                drinkButton.setPreferredSize(new Dimension(150, 150));
                drinkButton.setLayout(new BorderLayout());

                String buttonName = drink.getName();
                JLabel nameLabel = new JLabel(buttonName, SwingConstants.CENTER);
                drinkButton.add(nameLabel, BorderLayout.NORTH);

                String buttonPrice = " RM" + String.format("%.2f", drink.getPrice());
                JLabel priceLabel = new JLabel(buttonPrice, SwingConstants.CENTER);
                drinkButton.add(priceLabel, BorderLayout.SOUTH);

                drinkButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        selectedDrink = drink;
                        updateDrinksDetailPanel(drink);
                        updateQuantitySpinner();
                    }
                });

                drinksPanel.add(drinkButton);
            }
        }
    }
    
    public void updateDrinksDetailPanel(Drinks drink) {
        nameText.setText(drink.getName());
        quantityText.setText(String.valueOf(drink.getQuantity()));
        priceText.setText("RM" + String.format("%.2f", drink.getPrice()));
    }
    
    private void updateQuantitySpinner() {
        if (selectedDrink != null) {
            SpinnerNumberModel spinnerModel = new SpinnerNumberModel(1, 1, selectedDrink.getQuantity(), 1);
            quantity.setModel(spinnerModel);
        }
    }
    
    private void initializeCartTable() {
        cartTableModel = (DefaultTableModel) Cart.getModel();
    }

    public void addToCartTable(CartItem cartItem) {
        CartItem.addToCartTable(cartTableModel, cartItem);
    }

    public void removeFromCartTable(String itemName) {
        CartItem.removeFromCartTable(cartTableModel, itemName);
    }

    private int getCartTableRowIndex(String itemName) {
        for (int i = 0; i < cartTableModel.getRowCount(); i++) {
            String name = (String) cartTableModel.getValueAt(i, 0);
            if (name.equals(itemName)) {
                return i;
            }
        }
        return -1;
    }
    
    public void updateCartTableWithDrink(Drinks drink) {
        addToCartTable(new CartItem(drink.getName(), drink.getPrice(), 1));
    }
    
    private void updateTotalLabel() {
        double totalAmount = cart.calculateTotal(AddedDrink.getAddedDrinksList());
        total.setText("RM" + String.format("%.2f", totalAmount));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VendingMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VendingMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VendingMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VendingMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VendingMachine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddToCart;
    private javax.swing.JTable Cart;
    private javax.swing.JScrollPane DrinksPanel;
    private javax.swing.JButton RemoveFromCart;
    private javax.swing.JTextField cash;
    private javax.swing.JLabel change;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel nameText;
    private javax.swing.JButton pay;
    private javax.swing.JLabel priceText;
    private javax.swing.JSpinner quantity;
    private javax.swing.JLabel quantityText;
    private javax.swing.JLabel total;
    // End of variables declaration//GEN-END:variables
}
