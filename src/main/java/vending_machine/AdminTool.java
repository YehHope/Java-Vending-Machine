/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vending_machine;

import java.awt.Image;
import java.io.File;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author YehWolf
 */
public class AdminTool extends javax.swing.JFrame {
    
    private String selectedDrinkName;
    private double selectedDrinkPrice;
    private int selectedDrinkQuantity;
    private String selectedDrinkImagePath;

    /**
     * Creates new form AdminView
     */
    public AdminTool() {
        initComponents();
        populateDrinkSelector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        DrinkSelector = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        image = new javax.swing.JLabel();
        AddDrink = new javax.swing.JButton();
        RemoveDrink = new javax.swing.JButton();
        EditDrink = new javax.swing.JButton();
        chooseimage = new javax.swing.JButton();
        inventory = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Inventory Management");

        DrinkSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DrinkSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrinkSelectorActionPerformed(evt);
            }
        });

        jLabel1.setText("Select drink to edit :");

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        jLabel2.setText("Drink Name :");

        jLabel3.setText("Price :");

        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });

        jLabel4.setText("Quantity :");

        quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityActionPerformed(evt);
            }
        });

        jLabel5.setText("Image :");

        image.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        AddDrink.setText("Add Drink");
        AddDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDrinkActionPerformed(evt);
            }
        });

        RemoveDrink.setText("Remove Drink");
        RemoveDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveDrinkActionPerformed(evt);
            }
        });

        EditDrink.setText("Edit Drink");
        EditDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditDrinkActionPerformed(evt);
            }
        });

        chooseimage.setText("Choose Image");
        chooseimage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseimageActionPerformed(evt);
            }
        });

        inventory.setText("Show Inventory");
        inventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryActionPerformed(evt);
            }
        });

        jButton1.setText("Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(97, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(AddDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(EditDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(RemoveDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(188, 188, 188))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DrinkSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chooseimage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inventory)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(125, Short.MAX_VALUE)
                        .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DrinkSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)))
                .addComponent(chooseimage)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RemoveDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inventory)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DrinkSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrinkSelectorActionPerformed
        // Get the index of the selected item in the drink selector combo box
        int selectedIndex = DrinkSelector.getSelectedIndex();

        // Check if a valid item is selected
        if (selectedIndex >= 0) {
            // Check if the selected item is the first item ("Select a drink")
            if (selectedIndex == 0) {
                clearDrinkDetails(); // Clear drink details display
            } else {
                // Read the selected drink details from the drinks.txt file
                String selectedDrinkLine = FileUtils.readLinesFromFile("drinks.txt").get(selectedIndex - 1);
                String[] parts = selectedDrinkLine.split(",");

                // Check if there are enough parts to extract drink details
                if (parts.length >= 4) {
                    // Extract drink details from the parts array
                    selectedDrinkName = parts[0];
                    selectedDrinkPrice = Double.parseDouble(parts[1]);
                    selectedDrinkQuantity = Integer.parseInt(parts[2]);
                    selectedDrinkImagePath = parts[3];

                    // Update the drink details display
                    updateDrinkDetails();

                    // Update the image using the selected drink's image path
                    updateImage(selectedDrinkImagePath, image);
                }
            }
        }
    }//GEN-LAST:event_DrinkSelectorActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceActionPerformed

    private void AddDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDrinkActionPerformed
        // Get the input values from the text fields
        String drinkName = name.getText();
        String drinkPriceText = price.getText();
        String drinkQuantityText = quantity.getText();
        String drinkImagePath = image.getText();

        // Check if all the required fields are filled
        if (!drinkName.isEmpty() && !drinkPriceText.isEmpty() && !drinkQuantityText.isEmpty()) {
            try {
                // Parse the price and quantity from their respective text fields
                double drinkPrice = Double.parseDouble(drinkPriceText);
                int drinkQuantity = Integer.parseInt(drinkQuantityText);

                // If no image path is provided, set a default image path
                if (drinkImagePath.isEmpty()) {
                    drinkImagePath = "images\\no-image.png";
                }

                // Check if the drink name is already taken
                if (Validation.isDrinkNameTaken(drinkName)) {
                    JOptionPane.showMessageDialog(this, "A drink with the same name already exists.", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // Exit the method early if the name is taken
                }

                // Create a new Drinks object with the provided information
                Drinks newDrink = new Drinks(drinkName, drinkPrice, drinkQuantity, drinkImagePath);

                // Save the new drink to the drinks file
                Drinks.saveDrinkToFile(newDrink);

                // Clear input fields and update the drink selector
                clearDrinkDetails();
                populateDrinkSelector();

                // Show a success message
                JOptionPane.showMessageDialog(this, "Drink added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid price or quantity.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please fill in all the fields.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AddDrinkActionPerformed

    private void RemoveDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveDrinkActionPerformed
        int selectedIndex = DrinkSelector.getSelectedIndex();

        // Check if a drink is selected (index > 0)
        if (selectedIndex > 0) {
            // Get the name of the selected drink
            String selectedDrinkName = (String) DrinkSelector.getSelectedItem();

            // Ask for confirmation before removing the drink
            int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove this drink?", "Confirm Removal", JOptionPane.YES_NO_OPTION);

            // If user confirms removal
            if (choice == JOptionPane.YES_OPTION) {
                // Read all lines from the drinks file
                List<String> lines = FileUtils.readLinesFromFile("drinks.txt");

                // Iterate over the lines to find and remove the selected drink
                for (int i = 0; i < lines.size(); i++) {
                    String line = lines.get(i);
                    String[] parts = line.split(",");
                    if (parts.length >= 4 && parts[0].equals(selectedDrinkName)) {
                        lines.remove(i); // Remove the line for the selected drink
                        break; // Exit the loop after removing
                    }
                }

                // Write the updated lines back to the drinks file
                FileUtils.writeLinesToFile("drinks.txt", lines);

                // Update the drink selector's model to remove the selected drink
                DefaultComboBoxModel<String> comboBoxModel = (DefaultComboBoxModel<String>) DrinkSelector.getModel();
                comboBoxModel.removeElement(selectedDrinkName);

                // Reset the selected index to 0 and clear drink details
                DrinkSelector.setSelectedIndex(0);
                clearDrinkDetails();

                // Show a success message
                JOptionPane.showMessageDialog(this, "Drink removed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            // Show an error message if no drink is selected
            JOptionPane.showMessageDialog(this, "Please select a drink to remove.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RemoveDrinkActionPerformed

    private void chooseimageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseimageActionPerformed
        // Create a JFileChooser dialog to choose an image file
        JFileChooser fileChooser = new JFileChooser();

        // Show the dialog and get the user's choice (APPROVE_OPTION means the user selected a file)
        int result = fileChooser.showOpenDialog(this);

        // If the user selected a file
        if (result == JFileChooser.APPROVE_OPTION) {
            // Get the selected file
            File selectedFile = fileChooser.getSelectedFile();

            // Update the image in your UI with the selected file's absolute path
            updateImage(selectedFile.getAbsolutePath(), image);
        }
    }//GEN-LAST:event_chooseimageActionPerformed

    private void quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityActionPerformed

    private void EditDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditDrinkActionPerformed
        // Check if a drink is selected for editing
        if (selectedDrinkName != null) {
            // Get the edited values from the text fields
            String editedName = name.getText();
            double editedPrice = Double.parseDouble(price.getText());
            int editedQuantity = Integer.parseInt(quantity.getText());
            String editedImage = image.getText();

            // Read all lines from the drinks file
            List<String> lines = FileUtils.readLinesFromFile("drinks.txt");

            // Iterate through the lines to find and update the selected drink
            for (int i = 0; i < lines.size(); i++) {
                String line = lines.get(i);
                String[] parts = line.split(",");
                if (parts.length >= 4 && parts[0].equals(selectedDrinkName)) {
                    // Create a new line with the edited values
                    String updatedDrinkLine = editedName + "," + editedPrice + "," + editedQuantity + "," + editedImage;

                    // Update the line in the list
                    lines.set(i, updatedDrinkLine);
                    break; // Stop iterating after finding and updating the drink
                }
            }

            // Write the updated lines back to the drinks file
            FileUtils.writeLinesToFile("drinks.txt", lines);

            // Update the drink's details in the combo box and UI
            DefaultComboBoxModel<String> comboBoxModel = (DefaultComboBoxModel<String>) DrinkSelector.getModel();
            int selectedIndex = DrinkSelector.getSelectedIndex();
            comboBoxModel.removeElement(selectedDrinkName);
            comboBoxModel.insertElementAt(editedName, selectedIndex);
            comboBoxModel.setSelectedItem(editedName);

            // Update the selected drink's details
            selectedDrinkName = editedName;
            selectedDrinkPrice = editedPrice;
            selectedDrinkQuantity = editedQuantity;
            selectedDrinkImagePath = editedImage;
            updateDrinkDetails();

            // Show a success message
            JOptionPane.showMessageDialog(this, "Drink updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_EditDrinkActionPerformed

    private void inventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryActionPerformed
        AdminView adminView = new AdminView();
        adminView.setVisible(true);
    }//GEN-LAST:event_inventoryActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ReportGeneration reportGeneration = new ReportGeneration();
        reportGeneration.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    // Populate the drink selector combo box with drink names from the file
    private void populateDrinkSelector() {
        // Read all lines from the drinks file
        List<String> lines = FileUtils.readLinesFromFile("drinks.txt");

        // Create a new combo box model
        DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();

        // Add a default "Select a drink" option
        comboBoxModel.addElement("Select a drink");

        // Iterate through the lines and add drink names to the combo box model
        for (String line : lines) {
            String[] parts = line.split(",");
            if (parts.length >= 4) {
                String name = parts[0];
                comboBoxModel.addElement(name);
            }
        }

        // Set the combo box model as the model for the DrinkSelector combo box
        DrinkSelector.setModel(comboBoxModel);
    }

    // Clear the drink details and image display
    private void clearDrinkDetails() {
        name.setText("");
        price.setText("");
        quantity.setText("");
        image.setText("");
        image.setIcon(null);
    }

    // Update the drink details text fields based on the selected drink's information
    private void updateDrinkDetails() {
        name.setText(selectedDrinkName);
        price.setText(String.valueOf(selectedDrinkPrice));
        quantity.setText(String.valueOf(selectedDrinkQuantity));
        image.setText(selectedDrinkImagePath);
    }

    // Update the image label with the specified image path
    private void updateImage(String imagePath, JLabel imageLabel) {
        // Set the text of the image label to display the image path
        imageLabel.setText(imagePath);

        // Load the original image and scale it
        ImageIcon originalImageIcon = new ImageIcon(imagePath);
        Image originalImage = originalImageIcon.getImage();
        Image scaledImage = originalImage.getScaledInstance(110, 110, Image.SCALE_SMOOTH);

        // Create a new ImageIcon with the scaled image
        ImageIcon scaledImageIcon = new ImageIcon(scaledImage);

        // Set the scaled image icon as the icon for the image label
        imageLabel.setIcon(scaledImageIcon);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminTool().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddDrink;
    private javax.swing.JComboBox<String> DrinkSelector;
    private javax.swing.JButton EditDrink;
    private javax.swing.JButton RemoveDrink;
    private javax.swing.JButton chooseimage;
    private javax.swing.JLabel image;
    private javax.swing.JButton inventory;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField price;
    private javax.swing.JTextField quantity;
    // End of variables declaration//GEN-END:variables
}
